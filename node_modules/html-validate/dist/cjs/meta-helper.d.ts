import { k as MetaDataTable, n as MetaAttributeAllowedCallback } from './core.js';
import './rules-helper.js';

/**
 * Helper function to assist IDE with completion and type-checking.
 *
 * @public
 */
declare function defineMetadata(metatable: MetaDataTable): MetaDataTable;

/**
 * Helpers when writing element metadata.
 *
 * @public
 */
interface MetadataHelper {
    /** Returns an error if another attribute is omitted, i.e. it requires another attribute to be present to pass. */
    allowedIfAttributeIsPresent(this: void, ...attr: string[]): MetaAttributeAllowedCallback;
    /** Returns an error if another attribute is present, i.e. it requires another attribute to be omitted to pass. */
    allowedIfAttributeIsAbsent(this: void, ...attr: string[]): MetaAttributeAllowedCallback;
    /** Returns an error if another attribute does not have one of the listed values */
    allowedIfAttributeHasValue(this: void, attr: string, value: string[], options?: {
        defaultValue?: string | null;
    }): MetaAttributeAllowedCallback;
}
declare const metadataHelper: MetadataHelper;

export { defineMetadata as d, metadataHelper as m };
