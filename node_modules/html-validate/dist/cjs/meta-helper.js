'use strict';

var rulesHelper = require('./rules-helper.js');

/**
 * Helper function to assist IDE with completion and type-checking.
 *
 * @public
 */
function defineMetadata(metatable) {
    return metatable;
}

/**
 * @internal
 */
function allowedIfAttributeIsPresent(...attr) {
    return (node) => {
        if (attr.some((it) => node.hasAttribute(it))) {
            return null;
        }
        const expected = rulesHelper.naturalJoin(attr.map((it) => `"${it}"`));
        return `requires ${expected} attribute to be present`;
    };
}
/**
 * @internal
 */
function allowedIfAttributeIsAbsent(...attr) {
    return (node) => {
        const present = attr.filter((it) => node.hasAttribute(it));
        if (present.length === 0) {
            return null;
        }
        const expected = rulesHelper.naturalJoin(present.map((it) => `"${it}"`));
        return `cannot be used at the same time as ${expected}`;
    };
}
/**
 * @internal
 */
function allowedIfAttributeHasValue(key, expectedValue, { defaultValue } = {}) {
    return (node) => {
        const attr = node.getAttribute(key);
        if (attr === null || attr === void 0 ? void 0 : attr.isDynamic) {
            return null;
        }
        const actualValue = (attr === null || attr === void 0 ? void 0 : attr.value) ? attr.value.toString() : defaultValue;
        if (actualValue && expectedValue.includes(actualValue.toLocaleLowerCase())) {
            return null;
        }
        const expected = rulesHelper.naturalJoin(expectedValue.map((it) => `"${it}"`));
        return `"${key}" attribute must be ${expected}`;
    };
}
const metadataHelper = {
    allowedIfAttributeIsPresent,
    allowedIfAttributeIsAbsent,
    allowedIfAttributeHasValue,
};

exports.defineMetadata = defineMetadata;
exports.metadataHelper = metadataHelper;
//# sourceMappingURL=meta-helper.js.map
