import { f as HtmlElement } from './core.js';

interface IncludeExcludeOptions {
    include: string[] | null;
    exclude: string[] | null;
}
/**
 * @public
 */
declare function keywordPatternMatcher(list: string[], keyword: string): boolean;

declare const HTML_CACHE_KEY: unique symbol;
declare const A11Y_CACHE_KEY: unique symbol;
declare const IGNORE_HIDDEN_ROOT_HTML_CACHE_KEY: unique symbol;
declare const IGNORE_HIDDEN_ROOT_A11Y_CACHE_KEY: unique symbol;
/**
 * @public
 */
declare enum TextClassification {
    EMPTY_TEXT = 0,
    DYNAMIC_TEXT = 1,
    STATIC_TEXT = 2
}
/**
 * @public
 */
interface TextClassificationOptions {
    /** If `true` only accessible text is considered (default false) */
    accessible?: boolean;
    /** If `true` the `hidden` and `aria-hidden` attribute is ignored on the root
     * (and parents) elements (default false) */
    ignoreHiddenRoot?: boolean;
}
declare module "../../dom/cache" {
    interface DOMNodeCache {
        [HTML_CACHE_KEY]: TextClassification;
        [A11Y_CACHE_KEY]: TextClassification;
        [IGNORE_HIDDEN_ROOT_HTML_CACHE_KEY]: TextClassification;
        [IGNORE_HIDDEN_ROOT_A11Y_CACHE_KEY]: TextClassification;
    }
}
/**
 * Checks text content of an element.
 *
 * Any text is considered including text from descendant elements. Whitespace is
 * ignored.
 *
 * If any text is dynamic `TextClassification.DYNAMIC_TEXT` is returned.
 *
 * @public
 */
declare function classifyNodeText(node: HtmlElement, options?: TextClassificationOptions): TextClassification;

export { IncludeExcludeOptions as I, TextClassification as T, classifyNodeText as c, keywordPatternMatcher as k };
